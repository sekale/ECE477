
GccBoardProject5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b58  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  2000000c  00000b64  0002000c  2**2
                  ALLOC
  3 .stack        00002004  20000044  00000b9c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000835a  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015b8  00000000  00000000  000283e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001bb5  00000000  00000000  0002999f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000250  00000000  00000000  0002b554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000210  00000000  00000000  0002b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000112d7  00000000  00000000  0002b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005e62  00000000  00000000  0003cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005e4a8  00000000  00000000  00042aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000530  00000000  00000000  000a0f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002048 	.word	0x20002048
   4:	00000781 	.word	0x00000781
   8:	0000077d 	.word	0x0000077d
   c:	0000077d 	.word	0x0000077d
	...
  2c:	0000077d 	.word	0x0000077d
	...
  38:	0000077d 	.word	0x0000077d
  3c:	0000077d 	.word	0x0000077d
  40:	0000077d 	.word	0x0000077d
  44:	0000077d 	.word	0x0000077d
  48:	0000077d 	.word	0x0000077d
  4c:	0000077d 	.word	0x0000077d
  50:	0000077d 	.word	0x0000077d
  54:	0000077d 	.word	0x0000077d
  58:	0000077d 	.word	0x0000077d
  5c:	0000077d 	.word	0x0000077d
  60:	0000077d 	.word	0x0000077d
  64:	0000077d 	.word	0x0000077d
  68:	0000077d 	.word	0x0000077d
  6c:	0000077d 	.word	0x0000077d
  70:	0000077d 	.word	0x0000077d
  74:	0000077d 	.word	0x0000077d
  78:	0000077d 	.word	0x0000077d
  7c:	0000077d 	.word	0x0000077d
  80:	0000077d 	.word	0x0000077d
  84:	0000077d 	.word	0x0000077d
  88:	0000077d 	.word	0x0000077d
  8c:	0000077d 	.word	0x0000077d
  90:	0000077d 	.word	0x0000077d
  94:	0000077d 	.word	0x0000077d
  98:	0000077d 	.word	0x0000077d
  9c:	0000077d 	.word	0x0000077d
  a0:	0000077d 	.word	0x0000077d

000000a4 <__do_global_dtors_aux>:
  a4:	b510      	push	{r4, lr}
  a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
  a8:	7823      	ldrb	r3, [r4, #0]
  aa:	2b00      	cmp	r3, #0
  ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
  ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
  b0:	2b00      	cmp	r3, #0
  b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
  b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
  b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
  b8:	bf00      	nop
  ba:	2301      	movs	r3, #1
  bc:	7023      	strb	r3, [r4, #0]
  be:	bd10      	pop	{r4, pc}
  c0:	2000000c 	.word	0x2000000c
  c4:	00000000 	.word	0x00000000
  c8:	00000b58 	.word	0x00000b58

000000cc <frame_dummy>:
  cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
  ce:	b510      	push	{r4, lr}
  d0:	2b00      	cmp	r3, #0
  d2:	d003      	beq.n	dc <frame_dummy+0x10>
  d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
  d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
  d8:	e000      	b.n	dc <frame_dummy+0x10>
  da:	bf00      	nop
  dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
  de:	6803      	ldr	r3, [r0, #0]
  e0:	2b00      	cmp	r3, #0
  e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
  e4:	bd10      	pop	{r4, pc}
  e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
  e8:	2b00      	cmp	r3, #0
  ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
  ec:	4798      	blx	r3
  ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
  f0:	00000000 	.word	0x00000000
  f4:	20000010 	.word	0x20000010
  f8:	00000b58 	.word	0x00000b58
  fc:	00000b58 	.word	0x00000b58
 100:	00000000 	.word	0x00000000

00000104 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 104:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 106:	2000      	movs	r0, #0
 108:	4b08      	ldr	r3, [pc, #32]	; (12c <delay_init+0x28>)
 10a:	4798      	blx	r3
 10c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 10e:	4c08      	ldr	r4, [pc, #32]	; (130 <delay_init+0x2c>)
 110:	21fa      	movs	r1, #250	; 0xfa
 112:	0089      	lsls	r1, r1, #2
 114:	47a0      	blx	r4
 116:	4b07      	ldr	r3, [pc, #28]	; (134 <delay_init+0x30>)
 118:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 11a:	4907      	ldr	r1, [pc, #28]	; (138 <delay_init+0x34>)
 11c:	0028      	movs	r0, r5
 11e:	47a0      	blx	r4
 120:	4b06      	ldr	r3, [pc, #24]	; (13c <delay_init+0x38>)
 122:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 124:	2205      	movs	r2, #5
 126:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_init+0x3c>)
 128:	601a      	str	r2, [r3, #0]
}
 12a:	bd70      	pop	{r4, r5, r6, pc}
 12c:	0000053d 	.word	0x0000053d
 130:	00000995 	.word	0x00000995
 134:	20000004 	.word	0x20000004
 138:	000f4240 	.word	0x000f4240
 13c:	20000000 	.word	0x20000000
 140:	e000e010 	.word	0xe000e010

00000144 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 144:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 146:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_cycles_ms+0x24>)
 148:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 14a:	4a08      	ldr	r2, [pc, #32]	; (16c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 14c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 14e:	2180      	movs	r1, #128	; 0x80
 150:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
 152:	e006      	b.n	162 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
 154:	2c00      	cmp	r4, #0
 156:	d004      	beq.n	162 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
 158:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 15a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 15c:	6813      	ldr	r3, [r2, #0]
 15e:	420b      	tst	r3, r1
 160:	d0fc      	beq.n	15c <delay_cycles_ms+0x18>
 162:	3801      	subs	r0, #1
 164:	d2f6      	bcs.n	154 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
 166:	bd30      	pop	{r4, r5, pc}
 168:	20000004 	.word	0x20000004
 16c:	e000e010 	.word	0xe000e010

00000170 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 170:	4b0c      	ldr	r3, [pc, #48]	; (1a4 <cpu_irq_enter_critical+0x34>)
 172:	681b      	ldr	r3, [r3, #0]
 174:	2b00      	cmp	r3, #0
 176:	d110      	bne.n	19a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 178:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 17c:	2b00      	cmp	r3, #0
 17e:	d109      	bne.n	194 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 180:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 182:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 186:	2200      	movs	r2, #0
 188:	4b07      	ldr	r3, [pc, #28]	; (1a8 <cpu_irq_enter_critical+0x38>)
 18a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 18c:	3201      	adds	r2, #1
 18e:	4b07      	ldr	r3, [pc, #28]	; (1ac <cpu_irq_enter_critical+0x3c>)
 190:	701a      	strb	r2, [r3, #0]
 192:	e002      	b.n	19a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 194:	2200      	movs	r2, #0
 196:	4b05      	ldr	r3, [pc, #20]	; (1ac <cpu_irq_enter_critical+0x3c>)
 198:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 19a:	4a02      	ldr	r2, [pc, #8]	; (1a4 <cpu_irq_enter_critical+0x34>)
 19c:	6813      	ldr	r3, [r2, #0]
 19e:	3301      	adds	r3, #1
 1a0:	6013      	str	r3, [r2, #0]
}
 1a2:	4770      	bx	lr
 1a4:	20000028 	.word	0x20000028
 1a8:	20000008 	.word	0x20000008
 1ac:	2000002c 	.word	0x2000002c

000001b0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 1b0:	4b08      	ldr	r3, [pc, #32]	; (1d4 <cpu_irq_leave_critical+0x24>)
 1b2:	681a      	ldr	r2, [r3, #0]
 1b4:	3a01      	subs	r2, #1
 1b6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 1b8:	681b      	ldr	r3, [r3, #0]
 1ba:	2b00      	cmp	r3, #0
 1bc:	d109      	bne.n	1d2 <cpu_irq_leave_critical+0x22>
 1be:	4b06      	ldr	r3, [pc, #24]	; (1d8 <cpu_irq_leave_critical+0x28>)
 1c0:	781b      	ldrb	r3, [r3, #0]
 1c2:	2b00      	cmp	r3, #0
 1c4:	d005      	beq.n	1d2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 1c6:	2201      	movs	r2, #1
 1c8:	4b04      	ldr	r3, [pc, #16]	; (1dc <cpu_irq_leave_critical+0x2c>)
 1ca:	701a      	strb	r2, [r3, #0]
 1cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 1d0:	b662      	cpsie	i
	}
}
 1d2:	4770      	bx	lr
 1d4:	20000028 	.word	0x20000028
 1d8:	2000002c 	.word	0x2000002c
 1dc:	20000008 	.word	0x20000008

000001e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 1e2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 1e4:	ac01      	add	r4, sp, #4
 1e6:	2501      	movs	r5, #1
 1e8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 1ea:	2700      	movs	r7, #0
 1ec:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1ee:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 1f0:	0021      	movs	r1, r4
 1f2:	200e      	movs	r0, #14
 1f4:	4e06      	ldr	r6, [pc, #24]	; (210 <system_board_init+0x30>)
 1f6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 1f8:	2280      	movs	r2, #128	; 0x80
 1fa:	01d2      	lsls	r2, r2, #7
 1fc:	4b05      	ldr	r3, [pc, #20]	; (214 <system_board_init+0x34>)
 1fe:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 200:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 202:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 204:	0021      	movs	r1, r4
 206:	200f      	movs	r0, #15
 208:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
 20a:	b003      	add	sp, #12
 20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 20e:	46c0      	nop			; (mov r8, r8)
 210:	00000219 	.word	0x00000219
 214:	41004400 	.word	0x41004400

00000218 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 218:	b500      	push	{lr}
 21a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 21c:	ab01      	add	r3, sp, #4
 21e:	2280      	movs	r2, #128	; 0x80
 220:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 222:	780a      	ldrb	r2, [r1, #0]
 224:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 226:	784a      	ldrb	r2, [r1, #1]
 228:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 22a:	788a      	ldrb	r2, [r1, #2]
 22c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 22e:	0019      	movs	r1, r3
 230:	4b01      	ldr	r3, [pc, #4]	; (238 <port_pin_set_config+0x20>)
 232:	4798      	blx	r3
}
 234:	b003      	add	sp, #12
 236:	bd00      	pop	{pc}
 238:	0000071d 	.word	0x0000071d

0000023c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 23c:	b510      	push	{r4, lr}
	switch (clock_source) {
 23e:	2807      	cmp	r0, #7
 240:	d803      	bhi.n	24a <system_clock_source_get_hz+0xe>
 242:	0080      	lsls	r0, r0, #2
 244:	4b16      	ldr	r3, [pc, #88]	; (2a0 <system_clock_source_get_hz+0x64>)
 246:	581b      	ldr	r3, [r3, r0]
 248:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
 24a:	2000      	movs	r0, #0
 24c:	e027      	b.n	29e <system_clock_source_get_hz+0x62>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
 24e:	4b15      	ldr	r3, [pc, #84]	; (2a4 <system_clock_source_get_hz+0x68>)
 250:	68d8      	ldr	r0, [r3, #12]
 252:	e024      	b.n	29e <system_clock_source_get_hz+0x62>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 254:	4b14      	ldr	r3, [pc, #80]	; (2a8 <system_clock_source_get_hz+0x6c>)
 256:	6a1b      	ldr	r3, [r3, #32]
 258:	059b      	lsls	r3, r3, #22
 25a:	0f9b      	lsrs	r3, r3, #30
 25c:	4813      	ldr	r0, [pc, #76]	; (2ac <system_clock_source_get_hz+0x70>)
 25e:	40d8      	lsrs	r0, r3
 260:	e01d      	b.n	29e <system_clock_source_get_hz+0x62>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
 262:	4b10      	ldr	r3, [pc, #64]	; (2a4 <system_clock_source_get_hz+0x68>)
 264:	6918      	ldr	r0, [r3, #16]
 266:	e01a      	b.n	29e <system_clock_source_get_hz+0x62>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 268:	4b0e      	ldr	r3, [pc, #56]	; (2a4 <system_clock_source_get_hz+0x68>)
 26a:	681b      	ldr	r3, [r3, #0]
 26c:	2002      	movs	r0, #2
 26e:	4018      	ands	r0, r3
 270:	d015      	beq.n	29e <system_clock_source_get_hz+0x62>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 272:	490d      	ldr	r1, [pc, #52]	; (2a8 <system_clock_source_get_hz+0x6c>)
 274:	2210      	movs	r2, #16
 276:	68cb      	ldr	r3, [r1, #12]
 278:	421a      	tst	r2, r3
 27a:	d0fc      	beq.n	276 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
 27c:	4b09      	ldr	r3, [pc, #36]	; (2a4 <system_clock_source_get_hz+0x68>)
 27e:	681b      	ldr	r3, [r3, #0]
 280:	075b      	lsls	r3, r3, #29
 282:	d50b      	bpl.n	29c <system_clock_source_get_hz+0x60>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 284:	2000      	movs	r0, #0
 286:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <system_clock_source_get_hz+0x74>)
 288:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 28a:	4b06      	ldr	r3, [pc, #24]	; (2a4 <system_clock_source_get_hz+0x68>)
 28c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 28e:	041b      	lsls	r3, r3, #16
 290:	0c1b      	lsrs	r3, r3, #16
 292:	4358      	muls	r0, r3
 294:	e003      	b.n	29e <system_clock_source_get_hz+0x62>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
 296:	2080      	movs	r0, #128	; 0x80
 298:	0200      	lsls	r0, r0, #8
 29a:	e000      	b.n	29e <system_clock_source_get_hz+0x62>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
 29c:	4805      	ldr	r0, [pc, #20]	; (2b4 <system_clock_source_get_hz+0x78>)

	default:
		return 0;
	}
}
 29e:	bd10      	pop	{r4, pc}
 2a0:	00000af8 	.word	0x00000af8
 2a4:	20000030 	.word	0x20000030
 2a8:	40000800 	.word	0x40000800
 2ac:	007a1200 	.word	0x007a1200
 2b0:	00000641 	.word	0x00000641
 2b4:	02dc6c00 	.word	0x02dc6c00

000002b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 2b8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 2ba:	4c0c      	ldr	r4, [pc, #48]	; (2ec <system_clock_source_osc8m_set_config+0x34>)
 2bc:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 2be:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2c0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2c2:	7842      	ldrb	r2, [r0, #1]
 2c4:	2001      	movs	r0, #1
 2c6:	4002      	ands	r2, r0
 2c8:	0192      	lsls	r2, r2, #6
 2ca:	2640      	movs	r6, #64	; 0x40
 2cc:	43b3      	bics	r3, r6
 2ce:	4313      	orrs	r3, r2
 2d0:	0002      	movs	r2, r0
 2d2:	402a      	ands	r2, r5
 2d4:	01d2      	lsls	r2, r2, #7
 2d6:	307f      	adds	r0, #127	; 0x7f
 2d8:	4383      	bics	r3, r0
 2da:	4313      	orrs	r3, r2
 2dc:	2203      	movs	r2, #3
 2de:	400a      	ands	r2, r1
 2e0:	0212      	lsls	r2, r2, #8
 2e2:	4903      	ldr	r1, [pc, #12]	; (2f0 <system_clock_source_osc8m_set_config+0x38>)
 2e4:	400b      	ands	r3, r1
 2e6:	4313      	orrs	r3, r2
 2e8:	6223      	str	r3, [r4, #32]
}
 2ea:	bd70      	pop	{r4, r5, r6, pc}
 2ec:	40000800 	.word	0x40000800
 2f0:	fffffcff 	.word	0xfffffcff

000002f4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 2f4:	2807      	cmp	r0, #7
 2f6:	d803      	bhi.n	300 <system_clock_source_enable+0xc>
 2f8:	0080      	lsls	r0, r0, #2
 2fa:	4b1e      	ldr	r3, [pc, #120]	; (374 <system_clock_source_enable+0x80>)
 2fc:	581b      	ldr	r3, [r3, r0]
 2fe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 300:	2017      	movs	r0, #23
 302:	e036      	b.n	372 <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 304:	4a1c      	ldr	r2, [pc, #112]	; (378 <system_clock_source_enable+0x84>)
 306:	6a11      	ldr	r1, [r2, #32]
 308:	2302      	movs	r3, #2
 30a:	430b      	orrs	r3, r1
 30c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 30e:	2000      	movs	r0, #0
 310:	e02f      	b.n	372 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 312:	4a19      	ldr	r2, [pc, #100]	; (378 <system_clock_source_enable+0x84>)
 314:	6991      	ldr	r1, [r2, #24]
 316:	2302      	movs	r3, #2
 318:	430b      	orrs	r3, r1
 31a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 31c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 31e:	e028      	b.n	372 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 320:	4a15      	ldr	r2, [pc, #84]	; (378 <system_clock_source_enable+0x84>)
 322:	8a11      	ldrh	r1, [r2, #16]
 324:	2302      	movs	r3, #2
 326:	430b      	orrs	r3, r1
 328:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 32a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 32c:	e021      	b.n	372 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 32e:	4a12      	ldr	r2, [pc, #72]	; (378 <system_clock_source_enable+0x84>)
 330:	8a91      	ldrh	r1, [r2, #20]
 332:	2302      	movs	r3, #2
 334:	430b      	orrs	r3, r1
 336:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 338:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 33a:	e01a      	b.n	372 <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 33c:	4b0f      	ldr	r3, [pc, #60]	; (37c <system_clock_source_enable+0x88>)
 33e:	6819      	ldr	r1, [r3, #0]
 340:	2202      	movs	r2, #2
 342:	430a      	orrs	r2, r1
 344:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 346:	681a      	ldr	r2, [r3, #0]
 348:	4b0d      	ldr	r3, [pc, #52]	; (380 <system_clock_source_enable+0x8c>)
 34a:	4013      	ands	r3, r2
 34c:	4a0a      	ldr	r2, [pc, #40]	; (378 <system_clock_source_enable+0x84>)
 34e:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 350:	0011      	movs	r1, r2
 352:	2210      	movs	r2, #16
 354:	68cb      	ldr	r3, [r1, #12]
 356:	421a      	tst	r2, r3
 358:	d0fc      	beq.n	354 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 35a:	4a08      	ldr	r2, [pc, #32]	; (37c <system_clock_source_enable+0x88>)
 35c:	6891      	ldr	r1, [r2, #8]
 35e:	4b06      	ldr	r3, [pc, #24]	; (378 <system_clock_source_enable+0x84>)
 360:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 362:	6851      	ldr	r1, [r2, #4]
 364:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 366:	6812      	ldr	r2, [r2, #0]
 368:	b292      	uxth	r2, r2
 36a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 36c:	2000      	movs	r0, #0
 36e:	e000      	b.n	372 <system_clock_source_enable+0x7e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 370:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
 372:	4770      	bx	lr
 374:	00000b18 	.word	0x00000b18
 378:	40000800 	.word	0x40000800
 37c:	20000030 	.word	0x20000030
 380:	0000ff7f 	.word	0x0000ff7f

00000384 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 384:	b530      	push	{r4, r5, lr}
 386:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 388:	22c2      	movs	r2, #194	; 0xc2
 38a:	00d2      	lsls	r2, r2, #3
 38c:	4b1a      	ldr	r3, [pc, #104]	; (3f8 <system_clock_init+0x74>)
 38e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 390:	4a1a      	ldr	r2, [pc, #104]	; (3fc <system_clock_init+0x78>)
 392:	6853      	ldr	r3, [r2, #4]
 394:	211e      	movs	r1, #30
 396:	438b      	bics	r3, r1
 398:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 39a:	2301      	movs	r3, #1
 39c:	466a      	mov	r2, sp
 39e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3a0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 3a2:	4d17      	ldr	r5, [pc, #92]	; (400 <system_clock_init+0x7c>)
 3a4:	b2e0      	uxtb	r0, r4
 3a6:	4669      	mov	r1, sp
 3a8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3aa:	3401      	adds	r4, #1
 3ac:	2c1c      	cmp	r4, #28
 3ae:	d1f9      	bne.n	3a4 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 3b0:	a803      	add	r0, sp, #12
 3b2:	2400      	movs	r4, #0
 3b4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 3b6:	2501      	movs	r5, #1
 3b8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 3ba:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 3bc:	4b11      	ldr	r3, [pc, #68]	; (404 <system_clock_init+0x80>)
 3be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 3c0:	2006      	movs	r0, #6
 3c2:	4b11      	ldr	r3, [pc, #68]	; (408 <system_clock_init+0x84>)
 3c4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 3c6:	4b11      	ldr	r3, [pc, #68]	; (40c <system_clock_init+0x88>)
 3c8:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 3ca:	4b11      	ldr	r3, [pc, #68]	; (410 <system_clock_init+0x8c>)
 3cc:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 3ce:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 3d0:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 3d2:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 3d4:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 3d6:	466b      	mov	r3, sp
 3d8:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 3da:	2306      	movs	r3, #6
 3dc:	466a      	mov	r2, sp
 3de:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 3e0:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 3e2:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 3e4:	4669      	mov	r1, sp
 3e6:	2000      	movs	r0, #0
 3e8:	4b0a      	ldr	r3, [pc, #40]	; (414 <system_clock_init+0x90>)
 3ea:	4798      	blx	r3
 3ec:	2000      	movs	r0, #0
 3ee:	4b0a      	ldr	r3, [pc, #40]	; (418 <system_clock_init+0x94>)
 3f0:	4798      	blx	r3
#endif
}
 3f2:	b005      	add	sp, #20
 3f4:	bd30      	pop	{r4, r5, pc}
 3f6:	46c0      	nop			; (mov r8, r8)
 3f8:	40000800 	.word	0x40000800
 3fc:	41004000 	.word	0x41004000
 400:	00000625 	.word	0x00000625
 404:	000002b9 	.word	0x000002b9
 408:	000002f5 	.word	0x000002f5
 40c:	0000041d 	.word	0x0000041d
 410:	40000400 	.word	0x40000400
 414:	00000441 	.word	0x00000441
 418:	000004f9 	.word	0x000004f9

0000041c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 41c:	4a06      	ldr	r2, [pc, #24]	; (438 <system_gclk_init+0x1c>)
 41e:	6991      	ldr	r1, [r2, #24]
 420:	2308      	movs	r3, #8
 422:	430b      	orrs	r3, r1
 424:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 426:	2201      	movs	r2, #1
 428:	4b04      	ldr	r3, [pc, #16]	; (43c <system_gclk_init+0x20>)
 42a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 42c:	0019      	movs	r1, r3
 42e:	780b      	ldrb	r3, [r1, #0]
 430:	4213      	tst	r3, r2
 432:	d1fc      	bne.n	42e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 434:	4770      	bx	lr
 436:	46c0      	nop			; (mov r8, r8)
 438:	40000400 	.word	0x40000400
 43c:	40000c00 	.word	0x40000c00

00000440 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 440:	b570      	push	{r4, r5, r6, lr}
 442:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 444:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 446:	780c      	ldrb	r4, [r1, #0]
 448:	0224      	lsls	r4, r4, #8
 44a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 44c:	784b      	ldrb	r3, [r1, #1]
 44e:	2b00      	cmp	r3, #0
 450:	d002      	beq.n	458 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 452:	2380      	movs	r3, #128	; 0x80
 454:	02db      	lsls	r3, r3, #11
 456:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 458:	7a4b      	ldrb	r3, [r1, #9]
 45a:	2b00      	cmp	r3, #0
 45c:	d002      	beq.n	464 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 45e:	2380      	movs	r3, #128	; 0x80
 460:	031b      	lsls	r3, r3, #12
 462:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 464:	6848      	ldr	r0, [r1, #4]
 466:	2801      	cmp	r0, #1
 468:	d918      	bls.n	49c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 46a:	1e43      	subs	r3, r0, #1
 46c:	4218      	tst	r0, r3
 46e:	d110      	bne.n	492 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 470:	2802      	cmp	r0, #2
 472:	d906      	bls.n	482 <system_gclk_gen_set_config+0x42>
 474:	2302      	movs	r3, #2
 476:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 478:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 47a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 47c:	4298      	cmp	r0, r3
 47e:	d8fb      	bhi.n	478 <system_gclk_gen_set_config+0x38>
 480:	e000      	b.n	484 <system_gclk_gen_set_config+0x44>
 482:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 484:	0212      	lsls	r2, r2, #8
 486:	4332      	orrs	r2, r6
 488:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 48a:	2380      	movs	r3, #128	; 0x80
 48c:	035b      	lsls	r3, r3, #13
 48e:	431c      	orrs	r4, r3
 490:	e004      	b.n	49c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 492:	0205      	lsls	r5, r0, #8
 494:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 496:	2380      	movs	r3, #128	; 0x80
 498:	029b      	lsls	r3, r3, #10
 49a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 49c:	7a0b      	ldrb	r3, [r1, #8]
 49e:	2b00      	cmp	r3, #0
 4a0:	d002      	beq.n	4a8 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 4a2:	2380      	movs	r3, #128	; 0x80
 4a4:	039b      	lsls	r3, r3, #14
 4a6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4a8:	4a0f      	ldr	r2, [pc, #60]	; (4e8 <system_gclk_gen_set_config+0xa8>)
 4aa:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
 4ac:	b25b      	sxtb	r3, r3
 4ae:	2b00      	cmp	r3, #0
 4b0:	dbfb      	blt.n	4aa <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4b2:	4b0e      	ldr	r3, [pc, #56]	; (4ec <system_gclk_gen_set_config+0xac>)
 4b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 4b6:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <system_gclk_gen_set_config+0xb0>)
 4b8:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4ba:	4a0b      	ldr	r2, [pc, #44]	; (4e8 <system_gclk_gen_set_config+0xa8>)
 4bc:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 4be:	b25b      	sxtb	r3, r3
 4c0:	2b00      	cmp	r3, #0
 4c2:	dbfb      	blt.n	4bc <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 4c4:	4b08      	ldr	r3, [pc, #32]	; (4e8 <system_gclk_gen_set_config+0xa8>)
 4c6:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4c8:	001a      	movs	r2, r3
 4ca:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
 4cc:	b25b      	sxtb	r3, r3
 4ce:	2b00      	cmp	r3, #0
 4d0:	dbfb      	blt.n	4ca <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 4d2:	4a05      	ldr	r2, [pc, #20]	; (4e8 <system_gclk_gen_set_config+0xa8>)
 4d4:	6851      	ldr	r1, [r2, #4]
 4d6:	2380      	movs	r3, #128	; 0x80
 4d8:	025b      	lsls	r3, r3, #9
 4da:	400b      	ands	r3, r1
 4dc:	431c      	orrs	r4, r3
 4de:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 4e0:	4b04      	ldr	r3, [pc, #16]	; (4f4 <system_gclk_gen_set_config+0xb4>)
 4e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 4e4:	bd70      	pop	{r4, r5, r6, pc}
 4e6:	46c0      	nop			; (mov r8, r8)
 4e8:	40000c00 	.word	0x40000c00
 4ec:	00000171 	.word	0x00000171
 4f0:	40000c08 	.word	0x40000c08
 4f4:	000001b1 	.word	0x000001b1

000004f8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 4f8:	b510      	push	{r4, lr}
 4fa:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4fc:	4a0b      	ldr	r2, [pc, #44]	; (52c <system_gclk_gen_enable+0x34>)
 4fe:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 500:	b25b      	sxtb	r3, r3
 502:	2b00      	cmp	r3, #0
 504:	dbfb      	blt.n	4fe <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 506:	4b0a      	ldr	r3, [pc, #40]	; (530 <system_gclk_gen_enable+0x38>)
 508:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 50a:	4b0a      	ldr	r3, [pc, #40]	; (534 <system_gclk_gen_enable+0x3c>)
 50c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 50e:	4a07      	ldr	r2, [pc, #28]	; (52c <system_gclk_gen_enable+0x34>)
 510:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 512:	b25b      	sxtb	r3, r3
 514:	2b00      	cmp	r3, #0
 516:	dbfb      	blt.n	510 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 518:	4a04      	ldr	r2, [pc, #16]	; (52c <system_gclk_gen_enable+0x34>)
 51a:	6853      	ldr	r3, [r2, #4]
 51c:	2180      	movs	r1, #128	; 0x80
 51e:	0249      	lsls	r1, r1, #9
 520:	430b      	orrs	r3, r1
 522:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 524:	4b04      	ldr	r3, [pc, #16]	; (538 <system_gclk_gen_enable+0x40>)
 526:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 528:	bd10      	pop	{r4, pc}
 52a:	46c0      	nop			; (mov r8, r8)
 52c:	40000c00 	.word	0x40000c00
 530:	00000171 	.word	0x00000171
 534:	40000c04 	.word	0x40000c04
 538:	000001b1 	.word	0x000001b1

0000053c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 53c:	b570      	push	{r4, r5, r6, lr}
 53e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 540:	4a1a      	ldr	r2, [pc, #104]	; (5ac <system_gclk_gen_get_hz+0x70>)
 542:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 544:	b25b      	sxtb	r3, r3
 546:	2b00      	cmp	r3, #0
 548:	dbfb      	blt.n	542 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 54a:	4b19      	ldr	r3, [pc, #100]	; (5b0 <system_gclk_gen_get_hz+0x74>)
 54c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 54e:	4b19      	ldr	r3, [pc, #100]	; (5b4 <system_gclk_gen_get_hz+0x78>)
 550:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 552:	4a16      	ldr	r2, [pc, #88]	; (5ac <system_gclk_gen_get_hz+0x70>)
 554:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 556:	b25b      	sxtb	r3, r3
 558:	2b00      	cmp	r3, #0
 55a:	dbfb      	blt.n	554 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 55c:	4e13      	ldr	r6, [pc, #76]	; (5ac <system_gclk_gen_get_hz+0x70>)
 55e:	6870      	ldr	r0, [r6, #4]
 560:	04c0      	lsls	r0, r0, #19
 562:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
 564:	4b14      	ldr	r3, [pc, #80]	; (5b8 <system_gclk_gen_get_hz+0x7c>)
 566:	4798      	blx	r3
 568:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 56a:	4b12      	ldr	r3, [pc, #72]	; (5b4 <system_gclk_gen_get_hz+0x78>)
 56c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 56e:	6876      	ldr	r6, [r6, #4]
 570:	02f6      	lsls	r6, r6, #11
 572:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 574:	4b11      	ldr	r3, [pc, #68]	; (5bc <system_gclk_gen_get_hz+0x80>)
 576:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 578:	4a0c      	ldr	r2, [pc, #48]	; (5ac <system_gclk_gen_get_hz+0x70>)
 57a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
 57c:	b25b      	sxtb	r3, r3
 57e:	2b00      	cmp	r3, #0
 580:	dbfb      	blt.n	57a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 582:	4b0a      	ldr	r3, [pc, #40]	; (5ac <system_gclk_gen_get_hz+0x70>)
 584:	689c      	ldr	r4, [r3, #8]
 586:	0224      	lsls	r4, r4, #8
 588:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 58a:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <system_gclk_gen_get_hz+0x84>)
 58c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 58e:	2e00      	cmp	r6, #0
 590:	d107      	bne.n	5a2 <system_gclk_gen_get_hz+0x66>
 592:	2c01      	cmp	r4, #1
 594:	d907      	bls.n	5a6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 596:	0021      	movs	r1, r4
 598:	0028      	movs	r0, r5
 59a:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <system_gclk_gen_get_hz+0x88>)
 59c:	4798      	blx	r3
 59e:	0005      	movs	r5, r0
 5a0:	e001      	b.n	5a6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 5a2:	3401      	adds	r4, #1
 5a4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 5a6:	0028      	movs	r0, r5
 5a8:	bd70      	pop	{r4, r5, r6, pc}
 5aa:	46c0      	nop			; (mov r8, r8)
 5ac:	40000c00 	.word	0x40000c00
 5b0:	00000171 	.word	0x00000171
 5b4:	40000c04 	.word	0x40000c04
 5b8:	0000023d 	.word	0x0000023d
 5bc:	40000c08 	.word	0x40000c08
 5c0:	000001b1 	.word	0x000001b1
 5c4:	00000995 	.word	0x00000995

000005c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 5c8:	b510      	push	{r4, lr}
 5ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 5cc:	4b0f      	ldr	r3, [pc, #60]	; (60c <system_gclk_chan_disable+0x44>)
 5ce:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 5d0:	4b0f      	ldr	r3, [pc, #60]	; (610 <system_gclk_chan_disable+0x48>)
 5d2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 5d4:	4b0f      	ldr	r3, [pc, #60]	; (614 <system_gclk_chan_disable+0x4c>)
 5d6:	885a      	ldrh	r2, [r3, #2]
 5d8:	0512      	lsls	r2, r2, #20
 5da:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 5dc:	8859      	ldrh	r1, [r3, #2]
 5de:	4a0e      	ldr	r2, [pc, #56]	; (618 <system_gclk_chan_disable+0x50>)
 5e0:	400a      	ands	r2, r1
 5e2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 5e4:	8859      	ldrh	r1, [r3, #2]
 5e6:	4a0d      	ldr	r2, [pc, #52]	; (61c <system_gclk_chan_disable+0x54>)
 5e8:	400a      	ands	r2, r1
 5ea:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 5ec:	0019      	movs	r1, r3
 5ee:	2280      	movs	r2, #128	; 0x80
 5f0:	01d2      	lsls	r2, r2, #7
 5f2:	884b      	ldrh	r3, [r1, #2]
 5f4:	4213      	tst	r3, r2
 5f6:	d1fc      	bne.n	5f2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 5f8:	4906      	ldr	r1, [pc, #24]	; (614 <system_gclk_chan_disable+0x4c>)
 5fa:	884c      	ldrh	r4, [r1, #2]
 5fc:	0202      	lsls	r2, r0, #8
 5fe:	4b06      	ldr	r3, [pc, #24]	; (618 <system_gclk_chan_disable+0x50>)
 600:	4023      	ands	r3, r4
 602:	4313      	orrs	r3, r2
 604:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 606:	4b06      	ldr	r3, [pc, #24]	; (620 <system_gclk_chan_disable+0x58>)
 608:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 60a:	bd10      	pop	{r4, pc}
 60c:	00000171 	.word	0x00000171
 610:	40000c02 	.word	0x40000c02
 614:	40000c00 	.word	0x40000c00
 618:	fffff0ff 	.word	0xfffff0ff
 61c:	ffffbfff 	.word	0xffffbfff
 620:	000001b1 	.word	0x000001b1

00000624 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 624:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 626:	780c      	ldrb	r4, [r1, #0]
 628:	0224      	lsls	r4, r4, #8
 62a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 62c:	4b02      	ldr	r3, [pc, #8]	; (638 <system_gclk_chan_set_config+0x14>)
 62e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 630:	b2a4      	uxth	r4, r4
 632:	4b02      	ldr	r3, [pc, #8]	; (63c <system_gclk_chan_set_config+0x18>)
 634:	805c      	strh	r4, [r3, #2]
}
 636:	bd10      	pop	{r4, pc}
 638:	000005c9 	.word	0x000005c9
 63c:	40000c00 	.word	0x40000c00

00000640 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 640:	b510      	push	{r4, lr}
 642:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 644:	4b06      	ldr	r3, [pc, #24]	; (660 <system_gclk_chan_get_hz+0x20>)
 646:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 648:	4b06      	ldr	r3, [pc, #24]	; (664 <system_gclk_chan_get_hz+0x24>)
 64a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 64c:	4b06      	ldr	r3, [pc, #24]	; (668 <system_gclk_chan_get_hz+0x28>)
 64e:	885c      	ldrh	r4, [r3, #2]
 650:	0524      	lsls	r4, r4, #20
 652:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 654:	4b05      	ldr	r3, [pc, #20]	; (66c <system_gclk_chan_get_hz+0x2c>)
 656:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 658:	0020      	movs	r0, r4
 65a:	4b05      	ldr	r3, [pc, #20]	; (670 <system_gclk_chan_get_hz+0x30>)
 65c:	4798      	blx	r3
}
 65e:	bd10      	pop	{r4, pc}
 660:	00000171 	.word	0x00000171
 664:	40000c02 	.word	0x40000c02
 668:	40000c00 	.word	0x40000c00
 66c:	000001b1 	.word	0x000001b1
 670:	0000053d 	.word	0x0000053d

00000674 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 674:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 676:	78d3      	ldrb	r3, [r2, #3]
 678:	2b00      	cmp	r3, #0
 67a:	d11e      	bne.n	6ba <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 67c:	7813      	ldrb	r3, [r2, #0]
 67e:	2b80      	cmp	r3, #128	; 0x80
 680:	d004      	beq.n	68c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 682:	061b      	lsls	r3, r3, #24
 684:	2480      	movs	r4, #128	; 0x80
 686:	0264      	lsls	r4, r4, #9
 688:	4323      	orrs	r3, r4
 68a:	e000      	b.n	68e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 68c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 68e:	7854      	ldrb	r4, [r2, #1]
 690:	2502      	movs	r5, #2
 692:	43ac      	bics	r4, r5
 694:	d10a      	bne.n	6ac <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 696:	7894      	ldrb	r4, [r2, #2]
 698:	2c00      	cmp	r4, #0
 69a:	d103      	bne.n	6a4 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 69c:	2480      	movs	r4, #128	; 0x80
 69e:	02a4      	lsls	r4, r4, #10
 6a0:	4323      	orrs	r3, r4
 6a2:	e002      	b.n	6aa <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 6a4:	24c0      	movs	r4, #192	; 0xc0
 6a6:	02e4      	lsls	r4, r4, #11
 6a8:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 6aa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6ac:	7854      	ldrb	r4, [r2, #1]
 6ae:	3c01      	subs	r4, #1
 6b0:	2c01      	cmp	r4, #1
 6b2:	d812      	bhi.n	6da <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 6b4:	4c18      	ldr	r4, [pc, #96]	; (718 <_system_pinmux_config+0xa4>)
 6b6:	4023      	ands	r3, r4
 6b8:	e00f      	b.n	6da <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 6ba:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6bc:	040b      	lsls	r3, r1, #16
 6be:	0c1b      	lsrs	r3, r3, #16
 6c0:	24a0      	movs	r4, #160	; 0xa0
 6c2:	05e4      	lsls	r4, r4, #23
 6c4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6c6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6c8:	0c0b      	lsrs	r3, r1, #16
 6ca:	24d0      	movs	r4, #208	; 0xd0
 6cc:	0624      	lsls	r4, r4, #24
 6ce:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6d0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 6d2:	78d3      	ldrb	r3, [r2, #3]
 6d4:	2b00      	cmp	r3, #0
 6d6:	d018      	beq.n	70a <_system_pinmux_config+0x96>
 6d8:	e01c      	b.n	714 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6da:	040c      	lsls	r4, r1, #16
 6dc:	0c24      	lsrs	r4, r4, #16
 6de:	25a0      	movs	r5, #160	; 0xa0
 6e0:	05ed      	lsls	r5, r5, #23
 6e2:	432c      	orrs	r4, r5
 6e4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6e6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6e8:	0c0c      	lsrs	r4, r1, #16
 6ea:	25d0      	movs	r5, #208	; 0xd0
 6ec:	062d      	lsls	r5, r5, #24
 6ee:	432c      	orrs	r4, r5
 6f0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6f2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 6f4:	78d4      	ldrb	r4, [r2, #3]
 6f6:	2c00      	cmp	r4, #0
 6f8:	d10c      	bne.n	714 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 6fa:	035b      	lsls	r3, r3, #13
 6fc:	d505      	bpl.n	70a <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 6fe:	7893      	ldrb	r3, [r2, #2]
 700:	2b01      	cmp	r3, #1
 702:	d101      	bne.n	708 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 704:	6181      	str	r1, [r0, #24]
 706:	e000      	b.n	70a <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 708:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 70a:	7853      	ldrb	r3, [r2, #1]
 70c:	3b01      	subs	r3, #1
 70e:	2b01      	cmp	r3, #1
 710:	d800      	bhi.n	714 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 712:	6081      	str	r1, [r0, #8]
		}
	}
}
 714:	bd30      	pop	{r4, r5, pc}
 716:	46c0      	nop			; (mov r8, r8)
 718:	fffbffff 	.word	0xfffbffff

0000071c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 71c:	b510      	push	{r4, lr}
 71e:	0003      	movs	r3, r0
 720:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 722:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 724:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 726:	2900      	cmp	r1, #0
 728:	d104      	bne.n	734 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 72a:	0958      	lsrs	r0, r3, #5
 72c:	01c0      	lsls	r0, r0, #7
 72e:	4905      	ldr	r1, [pc, #20]	; (744 <system_pinmux_pin_set_config+0x28>)
 730:	468c      	mov	ip, r1
 732:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 734:	211f      	movs	r1, #31
 736:	400b      	ands	r3, r1
 738:	391e      	subs	r1, #30
 73a:	4099      	lsls	r1, r3
 73c:	4b02      	ldr	r3, [pc, #8]	; (748 <system_pinmux_pin_set_config+0x2c>)
 73e:	4798      	blx	r3
}
 740:	bd10      	pop	{r4, pc}
 742:	46c0      	nop			; (mov r8, r8)
 744:	41004400 	.word	0x41004400
 748:	00000675 	.word	0x00000675

0000074c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 74c:	4770      	bx	lr
 74e:	46c0      	nop			; (mov r8, r8)

00000750 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 750:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 752:	4b05      	ldr	r3, [pc, #20]	; (768 <system_init+0x18>)
 754:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 756:	4b05      	ldr	r3, [pc, #20]	; (76c <system_init+0x1c>)
 758:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 75a:	4b05      	ldr	r3, [pc, #20]	; (770 <system_init+0x20>)
 75c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 75e:	4b05      	ldr	r3, [pc, #20]	; (774 <system_init+0x24>)
 760:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 762:	4b05      	ldr	r3, [pc, #20]	; (778 <system_init+0x28>)
 764:	4798      	blx	r3
}
 766:	bd10      	pop	{r4, pc}
 768:	00000385 	.word	0x00000385
 76c:	000001e1 	.word	0x000001e1
 770:	0000074d 	.word	0x0000074d
 774:	0000074d 	.word	0x0000074d
 778:	0000074d 	.word	0x0000074d

0000077c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 77c:	e7fe      	b.n	77c <Dummy_Handler>
 77e:	46c0      	nop			; (mov r8, r8)

00000780 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 780:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 782:	4b1d      	ldr	r3, [pc, #116]	; (7f8 <Reset_Handler+0x78>)
 784:	4a1d      	ldr	r2, [pc, #116]	; (7fc <Reset_Handler+0x7c>)
 786:	429a      	cmp	r2, r3
 788:	d003      	beq.n	792 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 78a:	4b1d      	ldr	r3, [pc, #116]	; (800 <Reset_Handler+0x80>)
 78c:	4a1a      	ldr	r2, [pc, #104]	; (7f8 <Reset_Handler+0x78>)
 78e:	429a      	cmp	r2, r3
 790:	d304      	bcc.n	79c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 792:	4b1c      	ldr	r3, [pc, #112]	; (804 <Reset_Handler+0x84>)
 794:	4a1c      	ldr	r2, [pc, #112]	; (808 <Reset_Handler+0x88>)
 796:	429a      	cmp	r2, r3
 798:	d310      	bcc.n	7bc <Reset_Handler+0x3c>
 79a:	e01e      	b.n	7da <Reset_Handler+0x5a>
 79c:	4a1b      	ldr	r2, [pc, #108]	; (80c <Reset_Handler+0x8c>)
 79e:	4b18      	ldr	r3, [pc, #96]	; (800 <Reset_Handler+0x80>)
 7a0:	3303      	adds	r3, #3
 7a2:	1a9b      	subs	r3, r3, r2
 7a4:	089b      	lsrs	r3, r3, #2
 7a6:	3301      	adds	r3, #1
 7a8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 7aa:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 7ac:	4812      	ldr	r0, [pc, #72]	; (7f8 <Reset_Handler+0x78>)
 7ae:	4913      	ldr	r1, [pc, #76]	; (7fc <Reset_Handler+0x7c>)
 7b0:	588c      	ldr	r4, [r1, r2]
 7b2:	5084      	str	r4, [r0, r2]
 7b4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 7b6:	429a      	cmp	r2, r3
 7b8:	d1fa      	bne.n	7b0 <Reset_Handler+0x30>
 7ba:	e7ea      	b.n	792 <Reset_Handler+0x12>
 7bc:	4a14      	ldr	r2, [pc, #80]	; (810 <Reset_Handler+0x90>)
 7be:	4b11      	ldr	r3, [pc, #68]	; (804 <Reset_Handler+0x84>)
 7c0:	3303      	adds	r3, #3
 7c2:	1a9b      	subs	r3, r3, r2
 7c4:	089b      	lsrs	r3, r3, #2
 7c6:	3301      	adds	r3, #1
 7c8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 7ca:	2200      	movs	r2, #0
                *pDest++ = 0;
 7cc:	480e      	ldr	r0, [pc, #56]	; (808 <Reset_Handler+0x88>)
 7ce:	2100      	movs	r1, #0
 7d0:	1814      	adds	r4, r2, r0
 7d2:	6021      	str	r1, [r4, #0]
 7d4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 7d6:	429a      	cmp	r2, r3
 7d8:	d1fa      	bne.n	7d0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 7da:	4a0e      	ldr	r2, [pc, #56]	; (814 <Reset_Handler+0x94>)
 7dc:	21ff      	movs	r1, #255	; 0xff
 7de:	4b0e      	ldr	r3, [pc, #56]	; (818 <Reset_Handler+0x98>)
 7e0:	438b      	bics	r3, r1
 7e2:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 7e4:	4a0d      	ldr	r2, [pc, #52]	; (81c <Reset_Handler+0x9c>)
 7e6:	6851      	ldr	r1, [r2, #4]
 7e8:	2380      	movs	r3, #128	; 0x80
 7ea:	430b      	orrs	r3, r1
 7ec:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 7ee:	4b0c      	ldr	r3, [pc, #48]	; (820 <Reset_Handler+0xa0>)
 7f0:	4798      	blx	r3

        /* Branch to main function */
        main();
 7f2:	4b0c      	ldr	r3, [pc, #48]	; (824 <Reset_Handler+0xa4>)
 7f4:	4798      	blx	r3
 7f6:	e7fe      	b.n	7f6 <Reset_Handler+0x76>
 7f8:	20000000 	.word	0x20000000
 7fc:	00000b58 	.word	0x00000b58
 800:	2000000c 	.word	0x2000000c
 804:	20000044 	.word	0x20000044
 808:	2000000c 	.word	0x2000000c
 80c:	20000004 	.word	0x20000004
 810:	20000010 	.word	0x20000010
 814:	e000ed00 	.word	0xe000ed00
 818:	00000000 	.word	0x00000000
 81c:	41004000 	.word	0x41004000
 820:	00000aad 	.word	0x00000aad
 824:	00000899 	.word	0x00000899

00000828 <write_MOSI>:
#define SSD1331_CMD_PRECHARGELEVEL 	0xBB
#define SSD1331_CMD_VCOMH 			0xBE

void write_MOSI(bool high)
{
	if(high)
 828:	2800      	cmp	r0, #0
 82a:	d003      	beq.n	834 <write_MOSI+0xc>
 82c:	2240      	movs	r2, #64	; 0x40
 82e:	4b03      	ldr	r3, [pc, #12]	; (83c <write_MOSI+0x14>)
 830:	619a      	str	r2, [r3, #24]
 832:	e002      	b.n	83a <write_MOSI+0x12>
	} else {
		port_base->OUTCLR.reg = pin_mask;
 834:	2240      	movs	r2, #64	; 0x40
 836:	4b01      	ldr	r3, [pc, #4]	; (83c <write_MOSI+0x14>)
 838:	615a      	str	r2, [r3, #20]
	}
	else
	{
		port_pin_set_output_level(EXT1_PIN_16, false);
	}
}
 83a:	4770      	bx	lr
 83c:	41004400 	.word	0x41004400

00000840 <SPI_transfer_byte>:
		port_pin_set_output_level(EXT1_PIN_15, false);
	}
}

uint8_t SPI_transfer_byte(uint8_t byte_out)
{
 840:	b5f0      	push	{r4, r5, r6, r7, lr}
 842:	4657      	mov	r7, sl
 844:	464e      	mov	r6, r9
 846:	4645      	mov	r5, r8
 848:	b4e0      	push	{r5, r6, r7}
 84a:	4681      	mov	r9, r0
 84c:	2508      	movs	r5, #8
    uint8_t byte_in = 0;
    uint8_t bit;

    for (bit = 0x80; bit; bit >>= 1) {
 84e:	2480      	movs	r4, #128	; 0x80
        /* Shift-out a bit to the MOSI line */
        write_MOSI((byte_out & bit) ? HIGH : LOW);
 850:	4b0e      	ldr	r3, [pc, #56]	; (88c <SPI_transfer_byte+0x4c>)
 852:	4698      	mov	r8, r3

        /* Delay for at least the peer's setup time */
        delay_ms(SPI_SCLK_LOW_TIME);
 854:	4f0e      	ldr	r7, [pc, #56]	; (890 <SPI_transfer_byte+0x50>)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 856:	4e0f      	ldr	r6, [pc, #60]	; (894 <SPI_transfer_byte+0x54>)
    uint8_t byte_in = 0;
    uint8_t bit;

    for (bit = 0x80; bit; bit >>= 1) {
        /* Shift-out a bit to the MOSI line */
        write_MOSI((byte_out & bit) ? HIGH : LOW);
 858:	4648      	mov	r0, r9
 85a:	4020      	ands	r0, r4
 85c:	1e43      	subs	r3, r0, #1
 85e:	4198      	sbcs	r0, r3
 860:	b2c0      	uxtb	r0, r0
 862:	47c0      	blx	r8

        /* Delay for at least the peer's setup time */
        delay_ms(SPI_SCLK_LOW_TIME);
 864:	2032      	movs	r0, #50	; 0x32
 866:	47b8      	blx	r7
 868:	2320      	movs	r3, #32
 86a:	469a      	mov	sl, r3
 86c:	61b3      	str	r3, [r6, #24]
        /* Shift-in a bit from the MISO line */
        //if (read_MISO() == HIGH)
            //byte_in |= bit;

        /* Delay for at least the peer's hold time */
        delay_ms(SPI_SCLK_HIGH_TIME);
 86e:	2032      	movs	r0, #50	; 0x32
 870:	47b8      	blx	r7
	} else {
		port_base->OUTCLR.reg = pin_mask;
 872:	4653      	mov	r3, sl
 874:	6173      	str	r3, [r6, #20]
uint8_t SPI_transfer_byte(uint8_t byte_out)
{
    uint8_t byte_in = 0;
    uint8_t bit;

    for (bit = 0x80; bit; bit >>= 1) {
 876:	0864      	lsrs	r4, r4, #1
 878:	3d01      	subs	r5, #1
 87a:	2d00      	cmp	r5, #0
 87c:	d1ec      	bne.n	858 <SPI_transfer_byte+0x18>
        /* Pull the clock line low */
        write_SCLK(LOW_VALUE);
    }

    return byte_in;
}
 87e:	2000      	movs	r0, #0
 880:	bc1c      	pop	{r2, r3, r4}
 882:	4690      	mov	r8, r2
 884:	4699      	mov	r9, r3
 886:	46a2      	mov	sl, r4
 888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 88a:	46c0      	nop			; (mov r8, r8)
 88c:	00000829 	.word	0x00000829
 890:	00000145 	.word	0x00000145
 894:	41004400 	.word	0x41004400

00000898 <main>:

int main (void)
{
 898:	b5f0      	push	{r4, r5, r6, r7, lr}
 89a:	b085      	sub	sp, #20
	delay_init();
 89c:	4b37      	ldr	r3, [pc, #220]	; (97c <main+0xe4>)
 89e:	4798      	blx	r3
	system_init();
 8a0:	4b37      	ldr	r3, [pc, #220]	; (980 <main+0xe8>)
 8a2:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 8a4:	a903      	add	r1, sp, #12
 8a6:	2401      	movs	r4, #1
 8a8:	704c      	strb	r4, [r1, #1]
	config->powersave  = false;
 8aa:	2300      	movs	r3, #0
 8ac:	708b      	strb	r3, [r1, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
 8ae:	ae02      	add	r6, sp, #8
 8b0:	7033      	strb	r3, [r6, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 8b2:	7074      	strb	r4, [r6, #1]
	config->powersave  = false;
 8b4:	70b3      	strb	r3, [r6, #2]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
 8b6:	ad01      	add	r5, sp, #4
 8b8:	702b      	strb	r3, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 8ba:	706c      	strb	r4, [r5, #1]
	config->powersave  = false;
 8bc:	70ab      	strb	r3, [r5, #2]
/*#define EXT1_PIN_15               PIN_PA05
#define EXT1_PIN_16               PIN_PA06
#define EXT1_PIN_17               PIN_PA04
#define EXT1_PIN_18               PIN_PA07*/

	pin_conf_clk.direction  = PORT_PIN_DIR_OUTPUT;
 8be:	700c      	strb	r4, [r1, #0]
	port_pin_set_config(EXT1_PIN_15, &pin_conf_clk);
 8c0:	2005      	movs	r0, #5
 8c2:	4f30      	ldr	r7, [pc, #192]	; (984 <main+0xec>)
 8c4:	47b8      	blx	r7
	
	pin_conf_mosi.direction  = PORT_PIN_DIR_OUTPUT;
 8c6:	7034      	strb	r4, [r6, #0]
	port_pin_set_config(EXT1_PIN_16, &pin_conf_mosi);
 8c8:	0031      	movs	r1, r6
 8ca:	2006      	movs	r0, #6
 8cc:	47b8      	blx	r7
	
	pin_conf_CS.direction  = PORT_PIN_DIR_OUTPUT;
 8ce:	702c      	strb	r4, [r5, #0]
	port_pin_set_config(EXT1_PIN_17, &pin_conf_CS);
 8d0:	0029      	movs	r1, r5
 8d2:	2004      	movs	r0, #4
 8d4:	47b8      	blx	r7
	int j = 0;
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		//sending data
		delay_ms(10);
 8d6:	4d2c      	ldr	r5, [pc, #176]	; (988 <main+0xf0>)

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
 8d8:	4f2c      	ldr	r7, [pc, #176]	; (98c <main+0xf4>)
		port_pin_set_output_level(EXT1_PIN_17, false);
		delay_ms(100);
		SPI_transfer_byte(175);
 8da:	4c2d      	ldr	r4, [pc, #180]	; (990 <main+0xf8>)
	int j = 0;
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		//sending data
		delay_ms(10);
 8dc:	200a      	movs	r0, #10
 8de:	47a8      	blx	r5
 8e0:	2610      	movs	r6, #16
 8e2:	617e      	str	r6, [r7, #20]
		port_pin_set_output_level(EXT1_PIN_17, false);
		delay_ms(100);
 8e4:	2064      	movs	r0, #100	; 0x64
 8e6:	47a8      	blx	r5
		SPI_transfer_byte(175);
 8e8:	20af      	movs	r0, #175	; 0xaf
 8ea:	47a0      	blx	r4

		delay_ms(100);
 8ec:	2064      	movs	r0, #100	; 0x64
 8ee:	47a8      	blx	r5
		
		SPI_transfer_byte(SSD1331_CMD_STARTLINE); 	// 0xA1
 8f0:	20a1      	movs	r0, #161	; 0xa1
 8f2:	47a0      	blx	r4
		SPI_transfer_byte(0x0);
 8f4:	2000      	movs	r0, #0
 8f6:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_DISPLAYOFFSET); 	// 0xA2
 8f8:	20a2      	movs	r0, #162	; 0xa2
 8fa:	47a0      	blx	r4
		SPI_transfer_byte(0x0);
 8fc:	2000      	movs	r0, #0
 8fe:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_NORMALDISPLAY);  	// 0xA4
 900:	20a4      	movs	r0, #164	; 0xa4
 902:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_SETMULTIPLEX); 	// 0xA8
 904:	20a8      	movs	r0, #168	; 0xa8
 906:	47a0      	blx	r4
		SPI_transfer_byte(0x3F);  			// 0x3F 1/64 duty
 908:	203f      	movs	r0, #63	; 0x3f
 90a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_SETMASTER);  	// 0xAD
 90c:	20ad      	movs	r0, #173	; 0xad
 90e:	47a0      	blx	r4
		SPI_transfer_byte(0x8E);
 910:	208e      	movs	r0, #142	; 0x8e
 912:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_POWERMODE);  	// 0xB0
 914:	20b0      	movs	r0, #176	; 0xb0
 916:	47a0      	blx	r4
		SPI_transfer_byte(0x0B);
 918:	200b      	movs	r0, #11
 91a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_PRECHARGE);  	// 0xB1
 91c:	20b1      	movs	r0, #177	; 0xb1
 91e:	47a0      	blx	r4
		SPI_transfer_byte(0x31);
 920:	2031      	movs	r0, #49	; 0x31
 922:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_CLOCKDIV);  	// 0xB3
 924:	20b3      	movs	r0, #179	; 0xb3
 926:	47a0      	blx	r4
		SPI_transfer_byte(0xF0);  // 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 928:	20f0      	movs	r0, #240	; 0xf0
 92a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_PRECHARGEA);  	// 0x8A
 92c:	208a      	movs	r0, #138	; 0x8a
 92e:	47a0      	blx	r4
		SPI_transfer_byte(0x64);
 930:	2064      	movs	r0, #100	; 0x64
 932:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_PRECHARGEB);  	// 0x8B
 934:	208b      	movs	r0, #139	; 0x8b
 936:	47a0      	blx	r4
		SPI_transfer_byte(0x78);
 938:	2078      	movs	r0, #120	; 0x78
 93a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_PRECHARGEA);  	// 0x8C
 93c:	208a      	movs	r0, #138	; 0x8a
 93e:	47a0      	blx	r4
		SPI_transfer_byte(0x64);
 940:	2064      	movs	r0, #100	; 0x64
 942:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_PRECHARGELEVEL);  	// 0xBB
 944:	20bb      	movs	r0, #187	; 0xbb
 946:	47a0      	blx	r4
		SPI_transfer_byte(0x3A);
 948:	203a      	movs	r0, #58	; 0x3a
 94a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_VCOMH);  		// 0xBE
 94c:	20be      	movs	r0, #190	; 0xbe
 94e:	47a0      	blx	r4
		SPI_transfer_byte(0x3E);
 950:	203e      	movs	r0, #62	; 0x3e
 952:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_MASTERCURRENT);  	// 0x87
 954:	2087      	movs	r0, #135	; 0x87
 956:	47a0      	blx	r4
		SPI_transfer_byte(0x06);
 958:	2006      	movs	r0, #6
 95a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_CONTRASTA);  	// 0x81
 95c:	2081      	movs	r0, #129	; 0x81
 95e:	47a0      	blx	r4
		SPI_transfer_byte(0x91);
 960:	2091      	movs	r0, #145	; 0x91
 962:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_CONTRASTB);  	// 0x82
 964:	2082      	movs	r0, #130	; 0x82
 966:	47a0      	blx	r4
		SPI_transfer_byte(0x50);
 968:	2050      	movs	r0, #80	; 0x50
 96a:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_CONTRASTC);  	// 0x83
 96c:	2083      	movs	r0, #131	; 0x83
 96e:	47a0      	blx	r4
		SPI_transfer_byte(0x7D);
 970:	207d      	movs	r0, #125	; 0x7d
 972:	47a0      	blx	r4
		SPI_transfer_byte(SSD1331_CMD_DISPLAYON);	//--turn on oled panel  	
 974:	20af      	movs	r0, #175	; 0xaf
 976:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 978:	61be      	str	r6, [r7, #24]
 97a:	e7af      	b.n	8dc <main+0x44>
 97c:	00000105 	.word	0x00000105
 980:	00000751 	.word	0x00000751
 984:	00000219 	.word	0x00000219
 988:	00000145 	.word	0x00000145
 98c:	41004400 	.word	0x41004400
 990:	00000841 	.word	0x00000841

00000994 <__aeabi_uidiv>:
 994:	2200      	movs	r2, #0
 996:	0843      	lsrs	r3, r0, #1
 998:	428b      	cmp	r3, r1
 99a:	d374      	bcc.n	a86 <__aeabi_uidiv+0xf2>
 99c:	0903      	lsrs	r3, r0, #4
 99e:	428b      	cmp	r3, r1
 9a0:	d35f      	bcc.n	a62 <__aeabi_uidiv+0xce>
 9a2:	0a03      	lsrs	r3, r0, #8
 9a4:	428b      	cmp	r3, r1
 9a6:	d344      	bcc.n	a32 <__aeabi_uidiv+0x9e>
 9a8:	0b03      	lsrs	r3, r0, #12
 9aa:	428b      	cmp	r3, r1
 9ac:	d328      	bcc.n	a00 <__aeabi_uidiv+0x6c>
 9ae:	0c03      	lsrs	r3, r0, #16
 9b0:	428b      	cmp	r3, r1
 9b2:	d30d      	bcc.n	9d0 <__aeabi_uidiv+0x3c>
 9b4:	22ff      	movs	r2, #255	; 0xff
 9b6:	0209      	lsls	r1, r1, #8
 9b8:	ba12      	rev	r2, r2
 9ba:	0c03      	lsrs	r3, r0, #16
 9bc:	428b      	cmp	r3, r1
 9be:	d302      	bcc.n	9c6 <__aeabi_uidiv+0x32>
 9c0:	1212      	asrs	r2, r2, #8
 9c2:	0209      	lsls	r1, r1, #8
 9c4:	d065      	beq.n	a92 <__aeabi_uidiv+0xfe>
 9c6:	0b03      	lsrs	r3, r0, #12
 9c8:	428b      	cmp	r3, r1
 9ca:	d319      	bcc.n	a00 <__aeabi_uidiv+0x6c>
 9cc:	e000      	b.n	9d0 <__aeabi_uidiv+0x3c>
 9ce:	0a09      	lsrs	r1, r1, #8
 9d0:	0bc3      	lsrs	r3, r0, #15
 9d2:	428b      	cmp	r3, r1
 9d4:	d301      	bcc.n	9da <__aeabi_uidiv+0x46>
 9d6:	03cb      	lsls	r3, r1, #15
 9d8:	1ac0      	subs	r0, r0, r3
 9da:	4152      	adcs	r2, r2
 9dc:	0b83      	lsrs	r3, r0, #14
 9de:	428b      	cmp	r3, r1
 9e0:	d301      	bcc.n	9e6 <__aeabi_uidiv+0x52>
 9e2:	038b      	lsls	r3, r1, #14
 9e4:	1ac0      	subs	r0, r0, r3
 9e6:	4152      	adcs	r2, r2
 9e8:	0b43      	lsrs	r3, r0, #13
 9ea:	428b      	cmp	r3, r1
 9ec:	d301      	bcc.n	9f2 <__aeabi_uidiv+0x5e>
 9ee:	034b      	lsls	r3, r1, #13
 9f0:	1ac0      	subs	r0, r0, r3
 9f2:	4152      	adcs	r2, r2
 9f4:	0b03      	lsrs	r3, r0, #12
 9f6:	428b      	cmp	r3, r1
 9f8:	d301      	bcc.n	9fe <__aeabi_uidiv+0x6a>
 9fa:	030b      	lsls	r3, r1, #12
 9fc:	1ac0      	subs	r0, r0, r3
 9fe:	4152      	adcs	r2, r2
 a00:	0ac3      	lsrs	r3, r0, #11
 a02:	428b      	cmp	r3, r1
 a04:	d301      	bcc.n	a0a <__aeabi_uidiv+0x76>
 a06:	02cb      	lsls	r3, r1, #11
 a08:	1ac0      	subs	r0, r0, r3
 a0a:	4152      	adcs	r2, r2
 a0c:	0a83      	lsrs	r3, r0, #10
 a0e:	428b      	cmp	r3, r1
 a10:	d301      	bcc.n	a16 <__aeabi_uidiv+0x82>
 a12:	028b      	lsls	r3, r1, #10
 a14:	1ac0      	subs	r0, r0, r3
 a16:	4152      	adcs	r2, r2
 a18:	0a43      	lsrs	r3, r0, #9
 a1a:	428b      	cmp	r3, r1
 a1c:	d301      	bcc.n	a22 <__aeabi_uidiv+0x8e>
 a1e:	024b      	lsls	r3, r1, #9
 a20:	1ac0      	subs	r0, r0, r3
 a22:	4152      	adcs	r2, r2
 a24:	0a03      	lsrs	r3, r0, #8
 a26:	428b      	cmp	r3, r1
 a28:	d301      	bcc.n	a2e <__aeabi_uidiv+0x9a>
 a2a:	020b      	lsls	r3, r1, #8
 a2c:	1ac0      	subs	r0, r0, r3
 a2e:	4152      	adcs	r2, r2
 a30:	d2cd      	bcs.n	9ce <__aeabi_uidiv+0x3a>
 a32:	09c3      	lsrs	r3, r0, #7
 a34:	428b      	cmp	r3, r1
 a36:	d301      	bcc.n	a3c <__aeabi_uidiv+0xa8>
 a38:	01cb      	lsls	r3, r1, #7
 a3a:	1ac0      	subs	r0, r0, r3
 a3c:	4152      	adcs	r2, r2
 a3e:	0983      	lsrs	r3, r0, #6
 a40:	428b      	cmp	r3, r1
 a42:	d301      	bcc.n	a48 <__aeabi_uidiv+0xb4>
 a44:	018b      	lsls	r3, r1, #6
 a46:	1ac0      	subs	r0, r0, r3
 a48:	4152      	adcs	r2, r2
 a4a:	0943      	lsrs	r3, r0, #5
 a4c:	428b      	cmp	r3, r1
 a4e:	d301      	bcc.n	a54 <__aeabi_uidiv+0xc0>
 a50:	014b      	lsls	r3, r1, #5
 a52:	1ac0      	subs	r0, r0, r3
 a54:	4152      	adcs	r2, r2
 a56:	0903      	lsrs	r3, r0, #4
 a58:	428b      	cmp	r3, r1
 a5a:	d301      	bcc.n	a60 <__aeabi_uidiv+0xcc>
 a5c:	010b      	lsls	r3, r1, #4
 a5e:	1ac0      	subs	r0, r0, r3
 a60:	4152      	adcs	r2, r2
 a62:	08c3      	lsrs	r3, r0, #3
 a64:	428b      	cmp	r3, r1
 a66:	d301      	bcc.n	a6c <__aeabi_uidiv+0xd8>
 a68:	00cb      	lsls	r3, r1, #3
 a6a:	1ac0      	subs	r0, r0, r3
 a6c:	4152      	adcs	r2, r2
 a6e:	0883      	lsrs	r3, r0, #2
 a70:	428b      	cmp	r3, r1
 a72:	d301      	bcc.n	a78 <__aeabi_uidiv+0xe4>
 a74:	008b      	lsls	r3, r1, #2
 a76:	1ac0      	subs	r0, r0, r3
 a78:	4152      	adcs	r2, r2
 a7a:	0843      	lsrs	r3, r0, #1
 a7c:	428b      	cmp	r3, r1
 a7e:	d301      	bcc.n	a84 <__aeabi_uidiv+0xf0>
 a80:	004b      	lsls	r3, r1, #1
 a82:	1ac0      	subs	r0, r0, r3
 a84:	4152      	adcs	r2, r2
 a86:	1a41      	subs	r1, r0, r1
 a88:	d200      	bcs.n	a8c <__aeabi_uidiv+0xf8>
 a8a:	4601      	mov	r1, r0
 a8c:	4152      	adcs	r2, r2
 a8e:	4610      	mov	r0, r2
 a90:	4770      	bx	lr
 a92:	e7ff      	b.n	a94 <__aeabi_uidiv+0x100>
 a94:	b501      	push	{r0, lr}
 a96:	2000      	movs	r0, #0
 a98:	f000 f806 	bl	aa8 <__aeabi_idiv0>
 a9c:	bd02      	pop	{r1, pc}
 a9e:	46c0      	nop			; (mov r8, r8)

00000aa0 <__aeabi_uidivmod>:
 aa0:	2900      	cmp	r1, #0
 aa2:	d0f7      	beq.n	a94 <__aeabi_uidiv+0x100>
 aa4:	e776      	b.n	994 <__aeabi_uidiv>
 aa6:	4770      	bx	lr

00000aa8 <__aeabi_idiv0>:
 aa8:	4770      	bx	lr
 aaa:	46c0      	nop			; (mov r8, r8)

00000aac <__libc_init_array>:
 aac:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <__libc_init_array+0x3c>)
 aae:	b570      	push	{r4, r5, r6, lr}
 ab0:	2500      	movs	r5, #0
 ab2:	001e      	movs	r6, r3
 ab4:	4c0d      	ldr	r4, [pc, #52]	; (aec <__libc_init_array+0x40>)
 ab6:	1ae4      	subs	r4, r4, r3
 ab8:	10a4      	asrs	r4, r4, #2
 aba:	42a5      	cmp	r5, r4
 abc:	d004      	beq.n	ac8 <__libc_init_array+0x1c>
 abe:	00ab      	lsls	r3, r5, #2
 ac0:	58f3      	ldr	r3, [r6, r3]
 ac2:	4798      	blx	r3
 ac4:	3501      	adds	r5, #1
 ac6:	e7f8      	b.n	aba <__libc_init_array+0xe>
 ac8:	f000 f836 	bl	b38 <_init>
 acc:	4b08      	ldr	r3, [pc, #32]	; (af0 <__libc_init_array+0x44>)
 ace:	2500      	movs	r5, #0
 ad0:	001e      	movs	r6, r3
 ad2:	4c08      	ldr	r4, [pc, #32]	; (af4 <__libc_init_array+0x48>)
 ad4:	1ae4      	subs	r4, r4, r3
 ad6:	10a4      	asrs	r4, r4, #2
 ad8:	42a5      	cmp	r5, r4
 ada:	d004      	beq.n	ae6 <__libc_init_array+0x3a>
 adc:	00ab      	lsls	r3, r5, #2
 ade:	58f3      	ldr	r3, [r6, r3]
 ae0:	4798      	blx	r3
 ae2:	3501      	adds	r5, #1
 ae4:	e7f8      	b.n	ad8 <__libc_init_array+0x2c>
 ae6:	bd70      	pop	{r4, r5, r6, pc}
 ae8:	00000b44 	.word	0x00000b44
 aec:	00000b44 	.word	0x00000b44
 af0:	00000b44 	.word	0x00000b44
 af4:	00000b48 	.word	0x00000b48
 af8:	0000024e 	.word	0x0000024e
 afc:	0000024a 	.word	0x0000024a
 b00:	0000024a 	.word	0x0000024a
 b04:	00000296 	.word	0x00000296
 b08:	00000296 	.word	0x00000296
 b0c:	00000262 	.word	0x00000262
 b10:	00000254 	.word	0x00000254
 b14:	00000268 	.word	0x00000268
 b18:	00000320 	.word	0x00000320
 b1c:	00000300 	.word	0x00000300
 b20:	00000300 	.word	0x00000300
 b24:	00000370 	.word	0x00000370
 b28:	00000312 	.word	0x00000312
 b2c:	0000032e 	.word	0x0000032e
 b30:	00000304 	.word	0x00000304
 b34:	0000033c 	.word	0x0000033c

00000b38 <_init>:
 b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b3a:	46c0      	nop			; (mov r8, r8)
 b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b3e:	bc08      	pop	{r3}
 b40:	469e      	mov	lr, r3
 b42:	4770      	bx	lr

00000b44 <__init_array_start>:
 b44:	000000cd 	.word	0x000000cd

00000b48 <_fini>:
 b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 b4a:	46c0      	nop			; (mov r8, r8)
 b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 b4e:	bc08      	pop	{r3}
 b50:	469e      	mov	lr, r3
 b52:	4770      	bx	lr

00000b54 <__fini_array_start>:
 b54:	000000a5 	.word	0x000000a5
